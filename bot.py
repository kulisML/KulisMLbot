import asyncio
import sqlite3
import logging
from datetime import datetime, time
from typing import List, Set

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class UserState(StatesGroup):
    choosing_topics = State()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    raise ValueError("API_TOKEN not found")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º
TOPICS = {
    'cv': {'name': 'ü§ñ Computer Vision (CV)', 'emoji': 'ü§ñ'},
    'nlp': {'name': 'üó£Ô∏è NLP', 'emoji': 'üó£Ô∏è'},
    'llm': {'name': 'üìö LLM', 'emoji': 'üìö'},
    'rl': {'name': 'üéÆ Reinforcement Learning (RL)', 'emoji': 'üéÆ'},
    'mlops': {'name': '‚öôÔ∏è MLOps', 'emoji': '‚öôÔ∏è'}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        topic TEXT,
        subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id),
        UNIQUE(user_id, topic)
    )''')
    conn.commit()
    conn.close()
    logger.info("Database initialized")

def add_user(user_id: int, username: str, first_name: str, last_name: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
                   (user_id, username, first_name, last_name))
    conn.commit()
    conn.close()

def update_user_topics(user_id: int, topics: List[str]):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM subscriptions WHERE user_id = ?', (user_id,))
    for topic in topics:
        cursor.execute('INSERT INTO subscriptions (user_id, topic) VALUES (?, ?)', (user_id, topic))
    conn.commit()
    conn.close()
    logger.info(f"User {user_id} subscribed to: {topics}")

def get_user_topics(user_id: int) -> Set[str]:
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT topic FROM subscriptions WHERE user_id = ?', (user_id,))
    topics = {row[0] for row in cursor.fetchall()}
    conn.close()
    return topics

def get_all_subscribed_users() -> List[int]:
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT user_id FROM subscriptions')
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return user_ids

def get_user_subscriptions(user_id: int) -> List[str]:
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT topic FROM subscriptions WHERE user_id = ?', (user_id,))
    topics = [row[0] for row in cursor.fetchall()]
    conn.close()
    return topics

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–µ–º–∞–º–∏
def create_topics_keyboard(selected_topics: Set[str] = None) -> InlineKeyboardBuilder:
    if selected_topics is None:
        selected_topics = set()
    
    builder = InlineKeyboardBuilder()
    
    for topic_key, topic_data in TOPICS.items():
        prefix = "‚úÖ " if topic_key in selected_topics else ""
        text = f"{prefix}{topic_data['name']}"
        builder.add(InlineKeyboardButton(text=text, callback_data=f"topic_{topic_key}"))
    
    builder.add(InlineKeyboardButton(text="üöÄ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="done"))
    builder.adjust(1)
    return builder

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
async def get_news_for_topic(topic: str):
    news = {
        'cv': [
            {'title': '–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º –∑—Ä–µ–Ω–∏–∏', 'url': 'https://arxiv.org/list/cs.CV/recent'},
            {'title': 'OpenCV 4.8 released —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏', 'url': 'https://opencv.org'}
        ],
        'nlp': [
            {'title': '–¢—Ä–µ–Ω–¥—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ 2024', 'url': 'https://huggingface.co'},
            {'title': '–ù–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –¥–ª—è NLP –∑–∞–¥–∞—á', 'url': 'https://arxiv.org/list/cs.CL/recent'}
        ],
        'llm': [
            {'title': '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏—Ä–µ –±–æ–ª—å—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π', 'url': 'https://openai.com'},
            {'title': 'Local LLM: –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', 'url': 'https://github.com/topics/llm'}
        ],
        'rl': [
            {'title': 'Reinforcement Learning –≤ –∏–≥—Ä–∞—Ö', 'url': 'https://arxiv.org/list/cs.LG/recent'},
            {'title': '–ù–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã RL', 'url': 'https://deepmind.com'}
        ],
        'mlops': [
            {'title': '–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ MLOps 2024', 'url': 'https://mlops.community'},
            {'title': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π', 'url': 'https://github.com/topics/mlops'}
        ]
    }
    return news.get(topic, [])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    add_user(user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    current_topics = get_user_topics(user_id)
    
    welcome_text = (
        "ü§ñüöÄüìä *–ü—Ä–∏–≤–µ—Ç! –Ø KulisML* \n\n"
        "–Ø —Å–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ AI! "
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã üéØ\n\n"
        "*–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–º:*"
    )
    
    keyboard = create_topics_keyboard(current_topics)
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard.as_markup())
    await state.set_state(UserState.choosing_topics)
    logger.info(f"User {user_id} started bot")

@dp.callback_query(UserState.choosing_topics, F.data.startswith("topic_"))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext):
    topic_key = callback.data.split("_")[1]
    user_id = callback.from_user.id
    current_data = await state.get_data()
    selected_topics = current_data.get('selected_topics', set(get_user_topics(user_id)))
    
    if topic_key in selected_topics:
        selected_topics.remove(topic_key)
    else:
        selected_topics.add(topic_key)
    
    await state.update_data(selected_topics=selected_topics)
    keyboard = create_topics_keyboard(selected_topics)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(UserState.choosing_topics, F.data == "done")
async def process_done(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    current_data = await state.get_data()
    selected_topics = current_data.get('selected_topics', set())
    update_user_topics(user_id, list(selected_topics))
    
    if selected_topics:
        topics_list = "\n".join([f"‚Ä¢ {TOPICS[topic]['name']}" for topic in selected_topics])
        message_text = f"üéâ *–û—Ç–ª–∏—á–Ω–æ!* –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{topics_list}\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00 –Ω–æ–≤–æ—Å—Ç–∏! üì®"
    else:
        message_text = "‚ö†Ô∏è –¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã. –ù–∞–ø–∏—à–∏ /start —Å–Ω–æ–≤–∞ üîÑ"
    
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=None)
    await state.clear()
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async def send_daily_news():
    try:
        user_ids = get_all_subscribed_users()
        if not user_ids:
            return
        
        for user_id in user_ids:
            try:
                user_topics = get_user_subscriptions(user_id)
                if not user_topics:
                    continue
                
                news_text = "üì∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ AI* üöÄ\n\n"
                for topic in user_topics:
                    topic_news = await get_news_for_topic(topic)
                    if topic_news:
                        news_text += f"üî• *{TOPICS[topic]['name']}:*\n"
                        for i, news_item in enumerate(topic_news[:2], 1):
                            news_text += f"{i}. {news_item['title']}\nüîó [–ß–∏—Ç–∞—Ç—å]({news_item['url']})\n"
                        news_text += "\n"
                
                news_text += "*–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!* ‚ö°Ô∏è"
                await bot.send_message(user_id, news_text, parse_mode="Markdown", disable_web_page_preview=True)
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"Error sending to user {user_id}: {e}")
        
    except Exception as e:
        logger.error(f"Error in daily news: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def scheduler():
    while True:
        now = datetime.now().time()
        target_time = time(9, 0)
        now_datetime = datetime.now()
        target_datetime = datetime.combine(now_datetime.date(), target_time)
        if now > target_time:
            target_datetime = target_datetime.replace(day=target_datetime.day + 1)
        wait_seconds = (target_datetime - now_datetime).total_seconds()
        await asyncio.sleep(wait_seconds)
        await send_daily_news()

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("test_news"))
async def cmd_test_news(message: Message):
    user_id = message.from_user.id
    user_topics = get_user_subscriptions(user_id)
    if not user_topics:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—ã —á–µ—Ä–µ–∑ /start")
        return
    
    news_text = "üì∞ *–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏* üöÄ\n\n"
    for topic in user_topics:
        topic_news = await get_news_for_topic(topic)
        if topic_news:
            news_text += f"üî• *{TOPICS[topic]['name']}:*\n"
            for i, news_item in enumerate(topic_news[:2], 1):
                news_text += f"{i}. {news_item['title']}\nüîó [–ß–∏—Ç–∞—Ç—å]({news_item['url']})\n"
            news_text += "\n"
    
    await message.answer(news_text, parse_mode="Markdown", disable_web_page_preview=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    logger.info("ü§ñ KulisML Bot starting...")
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Bot error: {e}")
